<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人主页</title>
  
  <subtitle>记录</subtitle>
  <link href="https://junleea.github.io/atom.xml" rel="self"/>
  
  <link href="https://junleea.github.io/"/>
  <updated>2023-09-15T03:45:21.336Z</updated>
  <id>https://junleea.github.io/</id>
  
  <author>
    <name>LJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo迁移、问题处理</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/09/14/Hexo%E8%BF%81%E7%A7%BB%E3%80%81%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/09/14/Hexo%E8%BF%81%E7%A7%BB%E3%80%81%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</id>
    <published>2023-09-14T05:58:40.000Z</published>
    <updated>2023-09-15T03:45:21.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Wordpress到Hexo迁移"><a href="#一、Wordpress到Hexo迁移" class="headerlink" title="一、Wordpress到Hexo迁移"></a>一、Wordpress到Hexo迁移</h2><p><a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/migration.html%23WordPress">Hexo迁移</a><br>安装插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure><p>从wordpress下载：工具 -&gt; 导出 -&gt; wordpress导出 -&gt;导出所有文章<br>下载xml文件，导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate wordpress &quot;xml文件目录&quot;</span><br></pre></td></tr></table></figure><h2 id="二、Hexo问题处理"><a href="#二、Hexo问题处理" class="headerlink" title="二、Hexo问题处理"></a>二、Hexo问题处理</h2><h3 id="1-提交失败"><a href="#1-提交失败" class="headerlink" title="1.提交失败"></a>1.提交失败</h3><p>问题： ! [rejected]        master -&gt; master (fetch first)<br>error: failed to push some refs to</p><p>解决办法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br><span class="line"></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><hr><h3 id="2-编译问题"><a href="#2-编译问题" class="headerlink" title="2.编译问题"></a>2.编译问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save or yarn add hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure><h3 id="3-Hexo打开文章变成下载解决"><a href="#3-Hexo打开文章变成下载解决" class="headerlink" title="3.Hexo打开文章变成下载解决"></a>3.Hexo打开文章变成下载解决</h3><p>解决方法：将hexo的config文件下的permalink的最后缺少&#x2F;<br>正确例子：permalink: “&#x2F;:categories&#x2F;:year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;“</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Wordpress到Hexo迁移&quot;&gt;&lt;a href=&quot;#一、Wordpress到Hexo迁移&quot; class=&quot;headerlink&quot; title=&quot;一、Wordpress到Hexo迁移&quot;&gt;&lt;/a&gt;一、Wordpress到Hexo迁移&lt;/h2&gt;&lt;p&gt;&lt;a hre</summary>
      
    
    
    
    <category term="其它" scheme="https://junleea.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="Hexo" scheme="https://junleea.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Shell简单语法</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/09/12/shell%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/09/12/shell%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/</id>
    <published>2023-09-12T14:16:10.000Z</published>
    <updated>2023-09-14T05:52:42.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、输入输出"><a href="#一、输入输出" class="headerlink" title="一、输入输出"></a>一、输入输出</h2><h2 id="1、输入"><a href="#1、输入" class="headerlink" title="1、输入"></a>1、输入</h2><p>从控制台输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;input name:&quot; name</span><br></pre></td></tr></table></figure><p>从文件获取输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;input name:&quot; name &lt; data1.txt</span><br></pre></td></tr></table></figure><p>参数输入及使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$1    #使用第一个参数，依此类推使用其它参数</span><br></pre></td></tr></table></figure><h2 id="2、输出"><a href="#2、输出" class="headerlink" title="2、输出"></a>2、输出</h2><p>echo输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;str&quot; </span><br><span class="line">echo &quot;hello wordl!&quot;</span><br><span class="line">echo $str</span><br></pre></td></tr></table></figure><p>printf输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%-10s %-8s %-4.2f\n&quot; abc bc 1.23</span><br></pre></td></tr></table></figure><h1 id="二、变量、数组"><a href="#二、变量、数组" class="headerlink" title="二、变量、数组"></a>二、变量、数组</h1><h2 id="1、变量声明及使用"><a href="#1、变量声明及使用" class="headerlink" title="1、变量声明及使用"></a>1、变量声明及使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">str=&quot;hello&quot; #字符串变量</span><br><span class="line">str1=&quot;li,\&quot;$str\&quot;!\n&quot;  #字符串相加，和使用第一个字符串</span><br><span class="line">echo $str1</span><br><span class="line">echo $&#123;str&#125;</span><br><span class="line">echo $&#123;str:0:1&#125; #输出第1个和第2个字符串</span><br><span class="line">echo $&#123;#str&#125;   # 输出str字符串长度</span><br></pre></td></tr></table></figure><h2 id="2、数组声明及使用"><a href="#2、数组声明及使用" class="headerlink" title="2、数组声明及使用"></a>2、数组声明及使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list=(1 2 3 4)    #声明数组，用空格分隔开元素</span><br><span class="line">list[0]=200      #将第一个元素改为200</span><br><span class="line">a=$&#123;list[0]&#125;     #读取第1个元素</span><br><span class="line">echo $&#123;list[@]&#125;</span><br><span class="line">    #输出所有元素</span><br><span class="line">length=$&#123;#list[*]&#125;  #输出数组长度</span><br></pre></td></tr></table></figure><h2 id="3、参数"><a href="#3、参数" class="headerlink" title="3、参数"></a>3、参数</h2><p>$#</p><p>传递到脚本的参数个数</p><p>$*</p><p>以一个单字符串显示所有向脚本传递的参数。</p><p>$$</p><p>脚本运行的当前进程ID号</p><p>$!</p><p>后台运行的最后一个进程的ID号</p><p>$@</p><p>与$*相同，但是使用时加引号，并在引号中返回每个参数。</p><p>常用的几个参数获取及使用</p><h1 id="三、分支和循环"><a href="#三、分支和循环" class="headerlink" title="三、分支和循环"></a>三、分支和循环</h1><h2 id="1、分支"><a href="#1、分支" class="headerlink" title="1、分支"></a>1、分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if [ command ];then</span><br><span class="line">   代码</span><br><span class="line">elif [ command ];then</span><br><span class="line">   代码</span><br><span class="line">else</span><br><span class="line">   代码</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="1-1-数值判断"><a href="#1-1-数值判断" class="headerlink" title="1.1 数值判断"></a>1.1 数值判断</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ num1 -eq num2 ]      num1 和 num2 两数相等为真 , =</span><br><span class="line">[ num1 -ne num2 ]      num1 和 num2 两数不等为真 ,!=</span><br><span class="line">[ num1 -gt num2 ]      num1 大于 num1 为真 , &gt;</span><br><span class="line">[ num1 -ge num2 ]      num1 大于等于num2 为真, &gt;=</span><br><span class="line">[ num1 -lt num2 ]      num1 小于n um2 为真 , &lt;</span><br><span class="line">[ num1 -le num2 ]      num1 小于等于 num2 为真, &lt;=</span><br></pre></td></tr></table></figure><h3 id="1-2-字符串判断"><a href="#1-2-字符串判断" class="headerlink" title="1.2 字符串判断"></a>1.2 字符串判断</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ -z &quot;str&quot; ]   str的长度为零，则为真 ，即判断是否为空，空即是真；</span><br><span class="line">[ -n &quot;str&quot; ]   str的长度非零，则为真 ，即判断是否为非空，非空即是真；</span><br><span class="line">[ &quot;str1&quot; = &quot;str2&quot; ]   两个字符串相同，则为真；</span><br><span class="line">[ &quot;str1&quot; != &quot;str2&quot; ]   字符串不相同，则为真；</span><br><span class="line">[ &quot;str1&quot; ]　  字符串不为空，则为真，与-n类似。</span><br></pre></td></tr></table></figure><h3 id="1-3-文件及目录"><a href="#1-3-文件及目录" class="headerlink" title="1.3 文件及目录"></a>1.3 文件及目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ -e file ]        file 存在，则为真。</span><br><span class="line">[ -d DIR ]         file 存在，且是一个目录，则为真。</span><br><span class="line">[ -f file ]        file 存在，且是一个普通文件，则为真。</span><br><span class="line"></span><br><span class="line">[ -r file ]      file 存在且是可读的，则为真。</span><br><span class="line">[ -w file ]      file存在且是可写的，则为真。</span><br><span class="line">[ -x file ]         file 存在且是可执行的，则为真。</span><br></pre></td></tr></table></figure><h2 id="2、循环"><a href="#2、循环" class="headerlink" title="2、循环"></a>2、循环</h2><h2 id="2-1-for循环"><a href="#2-1-for循环" class="headerlink" title="2.1 for循环"></a>2.1 for循环</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量名 in 列表</span><br><span class="line">do</span><br><span class="line">  命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;1..5&#125;;</span><br><span class="line">do </span><br><span class="line">    echo $i;</span><br><span class="line">done</span><br><span class="line">#&#123;1..5&#125;为取值范围1到5</span><br><span class="line"> echo $i 输出当前的取值</span><br><span class="line"></span><br><span class="line">for((i=1;i&lt;=5;i++));</span><br><span class="line">do </span><br><span class="line">    echo $i;</span><br><span class="line">done</span><br><span class="line">#使用（（））双括号，可以支持C语言的一些命令</span><br><span class="line"></span><br><span class="line">for i in `seq 5`;</span><br><span class="line">do </span><br><span class="line">   echo $i;</span><br><span class="line">done</span><br><span class="line">#seq 5 与&#123;1..5&#125;效果一样</span><br></pre></td></tr></table></figure><h3 id="2-2-while循环"><a href="#2-2-while循环" class="headerlink" title="2.2 while循环"></a>2.2 while循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while  条件</span><br><span class="line">do</span><br><span class="line">      循环体</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">命令序列</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">函数名()&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、代码"><a href="#五、代码" class="headerlink" title="五、代码"></a>五、代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">name=&quot;hello world&quot;</span><br><span class="line">echo $name</span><br><span class="line">echo $&#123;#name&#125;</span><br><span class="line">echo $&#123;name:1:4&#125;</span><br><span class="line">list=(1 2 3 4 5)</span><br><span class="line">list[1]=100</span><br><span class="line">echo $&#123;list[1]&#125;</span><br><span class="line">echo $&#123;list[@]&#125;</span><br><span class="line">echo &quot;number:$#&quot;</span><br><span class="line">echo &quot;first:$1&quot;</span><br><span class="line">declare -A site</span><br><span class="line">site[&quot;google&quot;]=&quot;www.google.com&quot;</span><br><span class="line">site[&quot;runoob&quot;]=&quot;www.runoob.com&quot;</span><br><span class="line">site[&quot;taobao&quot;]=&quot;www.taobao.com&quot;</span><br><span class="line"></span><br><span class="line">echo $&#123;site[&quot;runoob&quot;]&#125;</span><br><span class="line"></span><br><span class="line">val=`expr $1 + $2 `</span><br><span class="line">echo &quot;val=$val&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#比较第一个参数和第2个参数是否相等</span><br><span class="line">if test $1 -eq $2</span><br><span class="line">then</span><br><span class="line">echo &quot;equal&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;it&#x27;s&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#输出list</span><br><span class="line">for i in &#123;1..10&#125;</span><br><span class="line">do</span><br><span class="line">echo &quot;the value is $i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">index=0</span><br><span class="line">#输出1到10</span><br><span class="line">while [ $index -le 10 ]; do</span><br><span class="line">echo &quot;$&#123;index&#125;&quot;</span><br><span class="line">let index=index+1</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function printhello() &#123;</span><br><span class="line">echo &quot;Hello&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printhello</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、输入输出&quot;&gt;&lt;a href=&quot;#一、输入输出&quot; class=&quot;headerlink&quot; title=&quot;一、输入输出&quot;&gt;&lt;/a&gt;一、输入输出&lt;/h2&gt;&lt;h2 id=&quot;1、输入&quot;&gt;&lt;a href=&quot;#1、输入&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="Linux" scheme="https://junleea.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://junleea.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>GitHub中用hexo搭建个人主页</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/09/11/github%E4%B8%AD%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/09/11/github%E4%B8%AD%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/</id>
    <published>2023-09-11T04:00:51.000Z</published>
    <updated>2023-09-14T05:52:33.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、原理及准备工作"><a href="#一、原理及准备工作" class="headerlink" title="一、原理及准备工作"></a>一、原理及准备工作</h2><p>原理：我们通过在本地编写好md文件，使用hexo生成静态网页，并把它上传到GitHub仓库（该仓库有域名），其他人可以直接通过域名来访问我们的网页。</p><p>准备工作：在github上注册一个新账号，在本地安装git。安装 Hexo需要用到npm,是node的包管理工具<a href="https://nodejs.org/en">Node.js (nodejs.org)</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli #npm安装hexo</span><br></pre></td></tr></table></figure><h2 id="二、Hexo-初始化、本地预览"><a href="#二、Hexo-初始化、本地预览" class="headerlink" title="二、Hexo 初始化、本地预览"></a>二、<strong>Hexo 初始化、本地预览</strong></h2><p><strong>初始化方式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure><p><strong>本地预览</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br><span class="line">本地打开http://localhost:4000/链接</span><br></pre></td></tr></table></figure><h2 id="三、Hexo部署到Github"><a href="#三、Hexo部署到Github" class="headerlink" title="三、Hexo部署到Github"></a>三、Hexo部署到Github</h2><p><strong>安装 hexo-deployer-git</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><strong>修改初始化目录下的_config.yml</strong> 文件：</p><p>把仓库地址复制到repository，（注意有空格）；</p><p><img src="https://www.ljsea.top/wp-content/uploads/2023/09/4-1024x298.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>修改完成之后运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>待上传成功后可以通过<strong>创建仓库时设置的域名</strong>来访问。</p><h2 id="四、编写文章"><a href="#四、编写文章" class="headerlink" title="四、编写文章"></a>四、编写文章</h2><p><strong>创建新文章</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章名字&quot;  #创建文章</span><br><span class="line"># 创建完成后会在source/_post 文件夹中生成一个与 文章名字 同名的文件夹，其中有文章名字.md的文件（我们将发布文章的原始文件）。我们的图片、视频等文件可以放在“与 文章名字 同名的文件夹”里，引用时可以用：title/example.PNG &quot;示例图片&quot;。</span><br></pre></td></tr></table></figure><p><strong>编写文章</strong>：</p><p><strong>标题及标头</strong>：</p><p>例如我新建hello文章，找到source&#x2F;_post&#x2F;hello.md文件，打开为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello</span><br><span class="line">date: 2023-09-11 11:38:04</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line">tags是文章的标签，可以添加category来添加分类。</span><br><span class="line">可以设置为：</span><br><span class="line">---</span><br><span class="line">title: Git简单使用流程</span><br><span class="line">tags: []</span><br><span class="line">id: &#x27;139&#x27;</span><br><span class="line">categories:</span><br><span class="line">  - - 学习笔记</span><br><span class="line">date: 2023-04-24 11:06:19</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>正文编写</strong>：</p><p>标题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Markdown 语法：</span><br><span class="line">1.# 一级标题</span><br><span class="line">2.## 二级标题</span><br><span class="line">3.### 三级标题</span><br><span class="line">4.#### 四级标题</span><br></pre></td></tr></table></figure><p>代码块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">代码</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>分割线:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.方法一：—</span><br><span class="line"></span><br><span class="line">2.方法二：+++</span><br><span class="line"></span><br><span class="line">3.方法三：***</span><br></pre></td></tr></table></figure><p>超链接:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.[&#x27;文字&#x27;](链接)</span><br><span class="line">2.&lt;链接&gt;</span><br><span class="line">图片链接：</span><br><span class="line">![图片文字](图片链接 &#x27;图片描述&#x27;)</span><br><span class="line">如：![示例图片](title/example.PNG &quot;示例图片&quot;)来添加图片</span><br></pre></td></tr></table></figure><p><strong>编写完文章后运行hexo g 和hexo d生成和部署文章。</strong></p><h2 id="五、设置主题及其它设置"><a href="#五、设置主题及其它设置" class="headerlink" title="五、设置主题及其它设置"></a>五、设置主题及其它设置</h2><p><strong>下载主题</strong>：</p><p>可以在<a href="https://hexo.io/themes/">Themes Hexo</a>中找到适合的主题，找到仓库地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在hexo初始化的目录下运行：</span><br><span class="line">git clone 仓库地址 themes/主题名称</span><br><span class="line">克隆完成后修改_config.yml文件：</span><br><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">keywords: 关键词</span><br><span class="line">author: 作者</span><br><span class="line">language: 语言(zh-CN)</span><br><span class="line">timezone: 时区(Asia/Shanghai)</span><br><span class="line"></span><br><span class="line">theme: 主题名称</span><br><span class="line">修改完成后运行：</span><br><span class="line">hexo clean #等价于 hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">#或者写成一行</span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>hexo常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、原理及准备工作&quot;&gt;&lt;a href=&quot;#一、原理及准备工作&quot; class=&quot;headerlink&quot; title=&quot;一、原理及准备工作&quot;&gt;&lt;/a&gt;一、原理及准备工作&lt;/h2&gt;&lt;p&gt;原理：我们通过在本地编写好md文件，使用hexo生成静态网页，并把它上传到GitHu</summary>
      
    
    
    
    <category term="其它" scheme="https://junleea.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="Hexo" scheme="https://junleea.github.io/tags/Hexo/"/>
    
    <category term="GitHub" scheme="https://junleea.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Docker安装SQL Server</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/08/06/ubuntu%E4%B8%8Bdocker%E5%AE%89%E8%A3%85sql-server/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/08/06/ubuntu%E4%B8%8Bdocker%E5%AE%89%E8%A3%85sql-server/</id>
    <published>2023-08-06T08:07:36.000Z</published>
    <updated>2023-09-12T14:28:16.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载镜像"><a href="#一、下载镜像" class="headerlink" title="一、下载镜像"></a>一、下载镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mcr.microsoft.com/mssql/server</span><br></pre></td></tr></table></figure><h2 id="二、启动容器"><a href="#二、启动容器" class="headerlink" title="二、启动容器"></a>二、启动容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;SA_PASSWORD=你的密码&quot; -p 1433:1433 --name sqlserver -d mcr.microsoft.com/mssql/server</span><br><span class="line"></span><br><span class="line">//解释：</span><br><span class="line">//sql server默认账号为SA,设置的密码为SA的密码</span><br><span class="line">//将sql server映射到1433端口</span><br><span class="line">//-e &quot;ACCEPT_EULA=Y&quot;将 ACCEPT_EULA 变量设置为任意值，以确认接受最终用户许可协议。 </span><br></pre></td></tr></table></figure><h2 id="三、查看是否运行并连接SQL-Server"><a href="#三、查看是否运行并连接SQL-Server" class="headerlink" title="三、查看是否运行并连接SQL Server"></a>三、查看是否运行并连接SQL Server</h2><h2 id="3-1-查看是否运行"><a href="#3-1-查看是否运行" class="headerlink" title="3.1 查看是否运行"></a>3.1 查看是否运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps  //查看正在运行的容器</span><br></pre></td></tr></table></figure><h2 id="3-2-连接SQL-Server"><a href="#3-2-连接SQL-Server" class="headerlink" title="3.2 连接SQL Server"></a>3.2 连接SQL Server</h2><p>使docker exec -it 命令在运行的容器内部启动交互式 Bash Shell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it sqlserver &quot;bash&quot;</span><br></pre></td></tr></table></figure><p>容器内部使用 sqlcmd 进行本地连接,默认情况下，sqlcmd 不在路径之中，因此需要指定完整路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P &quot;你的密码&quot;</span><br></pre></td></tr></table></figure><h1 id="四、使用Python连接SQL-Server数据库"><a href="#四、使用Python连接SQL-Server数据库" class="headerlink" title="四、使用Python连接SQL Server数据库"></a>四、使用Python连接SQL Server数据库</h1><p>在已经安装了python3后用pip3 install pymssql命令安装连接模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import pymssql</span><br><span class="line"> </span><br><span class="line"># 打开数据库连接</span><br><span class="line">db = pymssql.connect(server=&#x27;localhost&#x27;,port=&quot;1433&quot;, user=&#x27;SA&#x27;, password=&#x27;你的密码&#x27;)</span><br><span class="line"># 创建游标对象,并设置返回数据的类型为字典</span><br><span class="line">cursor = db.cursor(as_dict=True)</span><br><span class="line"># 设置立即操作</span><br><span class="line">db.autocommit(True)</span><br><span class="line"># 查看现有数据库</span><br><span class="line">sql = &quot;SELECT * FROM SYSDATABASES&quot;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">print(&quot;现有数据库：&quot;)</span><br><span class="line">while True:</span><br><span class="line">    msg = cursor.fetchone()</span><br><span class="line">    if msg is None:</span><br><span class="line">        break</span><br><span class="line">    print(msg[&#x27;name&#x27;])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、下载镜像&quot;&gt;&lt;a href=&quot;#一、下载镜像&quot; class=&quot;headerlink&quot; title=&quot;一、下载镜像&quot;&gt;&lt;/a&gt;一、下载镜像&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="Linux" scheme="https://junleea.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>linux查看端口占用情况</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/07/03/linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/07/03/linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</id>
    <published>2023-07-03T04:41:53.000Z</published>
    <updated>2023-09-14T05:53:14.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、netstat命令"><a href="#一、netstat命令" class="headerlink" title="一、netstat命令"></a>一、netstat命令</h1><p>常用选项：</p><p>-a (all) 显示所有选项，默认不显示LISTEN相关<br>-p 显示建立相关链接的程序名<br>-r 显示路由信息，路由表<br>-e 显示扩展信息，例如 uid<br>-s 按各个协议进行统计<br>-t (tcp) 仅显示tcp相关选项<br>-u (udp) 仅显示udp相关选项<br>-n 拒绝显示别名，能显示数字的全部转化成数字<br>-l 列出有在 Listen (监听) 的服务状态<br>-c 每隔一个固定时间，执行该 netstat 命令</p><p>常用命令：</p><p>列出连接：netstat -a<br>列出tcp连接：netstat -at<br><strong>-l</strong> 选项列出正在监听的套接字:netstat -tnl<br>打印统计数据:netstat -us<br>命令netstat -tnp  grep ssh可查看某一端口占用情况（ssh可替换为其它端口，如”520”)</p><h1 id="二、ss命令"><a href="#二、ss命令" class="headerlink" title="二、ss命令"></a>二、ss命令</h1><p>常用参数：</p><p>-V, –version #输出版本信息<br>-6, –ipv6 #只显示ipv6的sockets<br>-0, –packet #显示包经过的网络接口<br>-t, –tcp #显示tcp套接字<br>-u, –udp #显示udp套接字<br>-d, –dccp #显示dccp套接字<br>-w, –raw #显示raw套接字<br>-x, –unix #显示unix套接字<br>-n, –numeric #不解析服务名<br>-r, –resolve #解析主机名<br>-a, –all #显示所有的套接字<br>-l, –listening #显示监听状态的socket<br>-o, –options #显示计时器信息<br>-e, –extended #展示详细的socket信息<br>-m, –memory #展示socket的内存使用<br>-p, –processes #展示使用socket的进程<br>-i, –info #展示tcp内部信息<br>-s, –summary #展示socket使用汇总<br>-4, –ipv4 #只显示ipv4的sockets</p><p>常用命令：  </p><p>ss -pl命令列出所有进程及其打开的端口，通过grep可以过滤查看指定进程或端口：ss -tnlp  grep ssh<br>列出所有tcp连接：ss -t -a</p><h1 id="三、lsof-命令"><a href="#三、lsof-命令" class="headerlink" title="三、lsof 命令"></a>三、lsof 命令</h1><p>常用参数：</p><p>-a 列出打开文件存在的进程<br>-c &lt;进程名&gt; 列出指定进程所打开的文件<br>-p &lt;进程号&gt; 列出指定进程号所打开的文件<br>-g 列出GID号进程详情<br>-d &lt;文件号&gt; 列出占用该文件号的进程<br>+d &lt;目录&gt; 列出目录下被打开的文件<br>+D &lt;目录&gt; 递归列出目录下被打开的文件<br>-n &lt;目录&gt; 列出使用NFS的文件<br>-i &lt;条件&gt; 列出符合条件的进程（4、6、协议、:端口、 @ip ）<br>-u 列出UID号进程详情</p><p>常用命令：  </p><p>losf -c 进程名 ；查看某个进程名称当前打开的文件<br>lsof -i 端口 ；查看指定端口的通信连接情况<br>lsof -i -P  grep ssh ；查看指定端口的通信连接情况或lsof -i tcp:22</p><h1 id="四、-fuser-命令"><a href="#四、-fuser-命令" class="headerlink" title="四、 fuser 命令"></a>四、 fuser 命令</h1><p>常用参数：</p><p>-a,–所有显示未使用的文件<br>-i,–交互 杀戮前询问（忽略没有 -k）<br>-k,–kill 访问命名文件的进程<br>-l,–列表信号列出可用的信号名称<br>-m,–mount 显示使用指定文件系统或块设备的所有进程<br>-M,–ismountpoint 仅当 NAME 是挂载点时才满足请求<br>-n,–命名空间 在此名称空间中搜索空间（文件、udp 或 tcp）<br>-s,–静音操作 -信号发送此信号而不是SIGKILL信号<br>-u,–用户显示用户 ID<br>-v,–verbose verbose output<br>-w,–写仅终止具有写访问权限的进程<br>-V,–版本显示版本信息<br>-4,–ipv4 仅搜索 IPv4 套接字<br>-6,–ipv6 仅搜索 IPv6 套接字</p><p>常用命令：</p><p>fuser -v 22&#x2F;tcp 查看22端口tcp连接</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、netstat命令&quot;&gt;&lt;a href=&quot;#一、netstat命令&quot; class=&quot;headerlink&quot; title=&quot;一、netstat命令&quot;&gt;&lt;/a&gt;一、netstat命令&lt;/h1&gt;&lt;p&gt;常用选项：&lt;/p&gt;
&lt;p&gt;-a (all) 显示所有选项，默认不显示</summary>
      
    
    
    
    <category term="Linux" scheme="https://junleea.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://junleea.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git简单使用流程</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/04/24/git%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/04/24/git%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2023-04-24T03:06:19.000Z</published>
    <updated>2023-09-14T02:16:09.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>在windows下,下载安装包（<a href="http://安装包/">http:&#x2F;&#x2F;安装包</a>），之后安装； Linux(Debain系）下，直接输入命令:</p><p> sudo apt install git</p><h2 id="二、使用流程"><a href="#二、使用流程" class="headerlink" title="二、使用流程"></a>二、使用流程</h2><h3 id="2-1-初始化设置"><a href="#2-1-初始化设置" class="headerlink" title="2.1 初始化设置"></a>2.1 初始化设置</h3><p> #输入命令<br> git config –global user.name ‘yourname’<br> git config –global user.email ‘邮箱’</p><h3 id="2-2-具体流程"><a href="#2-2-具体流程" class="headerlink" title="2.2 具体流程"></a>2.2 具体流程</h3><p>在一个目录下，输入命令</p><p> git init</p><p>将把当前目录初始化； git add . 将当前目录下所以文件加入暂存区（只是把要提交的文件做了标记，并没有文件的复制）； git commit -m “提交记录” 将暂存区的文件提交到本地仓库；</p><h3 id="2-3-提交到远程仓库"><a href="#2-3-提交到远程仓库" class="headerlink" title="2.3 提交到远程仓库"></a>2.3 提交到远程仓库</h3><p>先注册登录gitee,或github或自建的gitlab，添加ssh公钥，之后创建 仓库； 添加公钥之前，先在本地机器上运行：</p><p> #windows:<br>在目录：C:\Users\(administrator or your computer name)\.ssh 下找到 id_rsa.pub文件将全部内容复制到gitee或github添加公钥；<br>注意：linux中目录为:&#x2F;root&#x2F;.ssh</p><p>已将公钥添加且创建新仓库后：</p><p>在本地一个已经初始化过的目录下：</p><p> #输入：<br>git remote add origin github.com:你的GitHub用户名&#x2F;你的仓库名<br>#其中 origin 为添加到本地的远程仓库的名字（可以自取，但是一般用它）</p><p>最后：</p><p> #输入：<br>git push -u origin master<br>#将本地仓库的master分支文件push到origin名字的仓库的主分支</p><h3 id="2-4-gitignore文件"><a href="#2-4-gitignore文件" class="headerlink" title="2.4 .gitignore文件"></a>2.4 .gitignore文件</h3><p>.gitignore文件在git工作区的根目录，用来忽略不必要提交的文件或文件夹。</p><p>常用：<br>File&#x2F;    忽略当前路径下的File文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件<br>&#x2F;File   忽略根目录下的File文件文件夹<br>!&#x2F;bin&#x2F;run.sh      不忽略 bin 目录下的 run.sh 文件<br>*.c   通配符，忽略所有 .c 文件<br>file.txt      忽略当前路径下的file.txt文件<br>**&#x2F;file  忽略&#x2F;file, a&#x2F;file, a&#x2F;b&#x2F;file等<br>a&#x2F;**&#x2F;b   忽略a&#x2F;b, a&#x2F;x&#x2F;b, a&#x2F;x&#x2F;y&#x2F;b等</p><p>.gitignore文件对于已被追踪和提交的文件是无效的，需要运行 git add .才会生效。</p><h2 id="三、版本恢复"><a href="#三、版本恢复" class="headerlink" title="三、版本恢复"></a>三、版本恢复</h2><p>通过git log来查看提交日志，查看要回退到的版本的版本号</p><p>运行命令：git reset –hard 目标版本号</p><p>更温和的回退方式：revert,撤销某个提交的修改</p><p>假设我们现在有一个代码库，其中有5个版本，我们想要撤销第3个版本的修改。可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert 123456</span><br></pre></td></tr></table></figure><h2 id="四、分支"><a href="#四、分支" class="headerlink" title="四、分支"></a>四、分支</h2><p>分支是平行的（相当于副本），主分支用来发布稳定版本，应新建一个开发分支来进行日常开发。<a href="https://www.bilibili.com/video/BV16M411z7uH/?spm_id_from=333.337.search-card.all.click&vd_source=bde5d951fb1b9b981704b6a422554530">图来源</a></p><p><img src="https://www.ljsea.top/wp-content/uploads/2023/09/5.png"></p><p><img src="https://www.ljsea.top/wp-content/uploads/2023/09/6-1024x328.png"></p><p><strong>常用命令</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch #查看分支，刚初始化时没有如何东西，没有输出</span><br><span class="line">git branch master #插件master分支</span><br><span class="line">git branch -m master main #将master分支名称修改为main</span><br><span class="line">git branch -d master #输出分支</span><br><span class="line">git checkout master #切换到master分支</span><br><span class="line">git merge dev #将dev分支合并到当前分支</span><br><span class="line">git checkout -b main #创建并进入main分支</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h2&gt;&lt;p&gt;在windows下,下载安装包（&lt;a href=&quot;http://安装包/&quot;&gt;http:&amp;#x2F;&amp;#x2F;安装包&lt;/a&gt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://junleea.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Replit中安装WordPress</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/04/08/replit%E4%B8%AD%E5%AE%89%E8%A3%85wordpress/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/04/08/replit%E4%B8%AD%E5%AE%89%E8%A3%85wordpress/</id>
    <published>2023-04-08T05:54:48.000Z</published>
    <updated>2023-09-12T14:28:16.458Z</updated>
    
    <content type="html"><![CDATA[<p>一、准备</p><p>replit注册之后在主页create replit中新建一个php web server.</p><p>将replit.nix修改为</p><p>{ pkgs }: { deps &#x3D; [ pkgs.php74 pkgs.less pkgs.wp-cli ]; }</p><p>二、安装</p><p>再在控制台输入命令：</p><p>bash &lt;(curl -s <a href="https://raw.githubusercontent.com/ethanpil/wordpress-on-replit/master/install-wordpress-on-replit.sh">https://raw.githubusercontent.com/ethanpil/wordpress-on-replit/master/install-wordpress-on-replit.sh</a>)</p><p>运行命令，之后在命令提示的地方设置自己的用户名和密码等信息。</p><p>三、通过replit给我们的域名访问自己的网站。</p><p>参考链接：<a href="https://github.com/ethanpil/wordpress-on-replit">https://github.com/ethanpil/wordpress-on-replit</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、准备&lt;/p&gt;
&lt;p&gt;replit注册之后在主页create replit中新建一个php web server.&lt;/p&gt;
&lt;p&gt;将replit.nix修改为&lt;/p&gt;
&lt;p&gt;{ pkgs }: { deps &amp;#x3D; [ pkgs.php74 pkgs.less pk</summary>
      
    
    
    
    <category term="uncategorized" scheme="https://junleea.github.io/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>云</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/02/11/%E4%BA%91/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/02/11/%E4%BA%91/</id>
    <published>2023-02-11T06:30:26.000Z</published>
    <updated>2023-09-14T02:14:45.527Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.lckattb.cn/wp-content/uploads/2023/02/IMG_20230204_185043-1024x466.jpg"> <img src="https://www.lckattb.cn/wp-content/uploads/2023/02/1-663x1024.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://www.lckattb.cn/wp-content/uploads/2023/02/IMG_20230204_185043-1024x466.jpg&quot;&gt; &lt;img src=&quot;https://www.lckattb.cn/wp-conten</summary>
      
    
    
    
    <category term="生活记录" scheme="https://junleea.github.io/categories/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>海明码</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/02/07/%E6%B5%B7%E6%98%8E%E7%A0%81/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/02/07/%E6%B5%B7%E6%98%8E%E7%A0%81/</id>
    <published>2023-02-07T07:43:18.000Z</published>
    <updated>2023-09-12T14:46:40.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、海明码的位数"><a href="#一、海明码的位数" class="headerlink" title="一、海明码的位数"></a>一、海明码的位数</h2><p>校验位k,信息为n; 要满足：2^k&gt;&#x3D;k+n+1 海明码位数为：k+n</p><h2 id="二、海明码"><a href="#二、海明码" class="headerlink" title="二、海明码"></a>二、海明码</h2><p>1、校验位Pi放在2^(i-1)上 2、求校验位 <img src="https://www.lckattb.cn/wp-content/uploads/2023/02/3-300x149.png"> 3、纠错 <img src="https://www.lckattb.cn/wp-content/uploads/2023/02/4.png"> <img src="https://www.lckattb.cn/wp-content/uploads/2023/02/5-300x61.png"> S1,S2,S3组成的二进制数S3S2S1转为十进制数为a,出错位为Ha。 参考：<a href="https://www.bilibili.com/video/BV1BE411D7ii?p=12&vd_source=bde5d951fb1b9b981704b6a422554530">https://www.bilibili.com/video/BV1BE411D7ii?p=12&vd_source&#x3D;bde5d951fb1b9b981704b6a422554530</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、海明码的位数&quot;&gt;&lt;a href=&quot;#一、海明码的位数&quot; class=&quot;headerlink&quot; title=&quot;一、海明码的位数&quot;&gt;&lt;/a&gt;一、海明码的位数&lt;/h2&gt;&lt;p&gt;校验位k,信息为n; 要满足：2^k&amp;gt;&amp;#x3D;k+n+1 海明码位数为：k+n&lt;/</summary>
      
    
    
    
    <category term="计组" scheme="https://junleea.github.io/categories/%E8%AE%A1%E7%BB%84/"/>
    
    
  </entry>
  
  <entry>
    <title>循环冗余校验码</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/02/07/%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C%E7%A0%81/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/02/07/%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C%E7%A0%81/</id>
    <published>2023-02-07T07:13:15.000Z</published>
    <updated>2023-09-12T15:34:13.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、CRC码组成"><a href="#一、CRC码组成" class="headerlink" title="一、CRC码组成"></a>一、CRC码组成</h2><p>K位信息位+R位校验位</p><p>R&#x3D;生成多项式的最高次幂（生成多项式位一开始规定的除数）</p><h2 id="二、求校验位"><a href="#二、求校验位" class="headerlink" title="二、求校验位"></a>二、求校验位</h2><p>1.移位</p><p>将信息码向左移动R位，最后补零。</p><p>2.相除</p><p>对移动后的信息码与生成多项式对应的二进制码进行模2除法，产生的余数为校验位。</p><p>方法：”模2除“、”模2减“（异或运算）</p><p><img src="https://www.lckattb.cn/wp-content/uploads/2023/02/1.png"></p><h2 id="三、校验与纠错"><a href="#三、校验与纠错" class="headerlink" title="三、校验与纠错"></a>三、校验与纠错</h2><p>1、发送</p><p>Cn…..C3C2C1</p><p>2、校验</p><p>若接收方收到的二进制码与生成多项式对应的二进制码进行模2除的操作余数为0，则数据没有出错。</p><p>3、纠错</p><p>该方法在校验位所能表示的最大数小于总的传输位数时有检错的能力，但纠错的能力不精确。</p><p>当满足2^R&gt;&#x3D;K+R+1时，CRC码有一位的纠错能力。</p><p>在能进行纠错时，若相除得到的余数转为十进制数为a,则出错的为Ca.（实际应用中主要用检错能力，但它也有纠错的能力。）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、CRC码组成&quot;&gt;&lt;a href=&quot;#一、CRC码组成&quot; class=&quot;headerlink&quot; title=&quot;一、CRC码组成&quot;&gt;&lt;/a&gt;一、CRC码组成&lt;/h2&gt;&lt;p&gt;K位信息位+R位校验位&lt;/p&gt;
&lt;p&gt;R&amp;#x3D;生成多项式的最高次幂（生成多项式位一开始</summary>
      
    
    
    
    <category term="计组" scheme="https://junleea.github.io/categories/%E8%AE%A1%E7%BB%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux安装code-server</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/02/04/linux%E5%AE%89%E8%A3%85code-server/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/02/04/linux%E5%AE%89%E8%A3%85code-server/</id>
    <published>2023-02-04T13:13:13.000Z</published>
    <updated>2023-09-12T15:32:47.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、脚本安装"><a href="#一、脚本安装" class="headerlink" title="一、脚本安装"></a>一、脚本安装</h2><p>运行：</p><p>curl -fsSL <a href="https://code-server.dev/install.sh">https://code-server.dev/install.sh</a> sh此方法安装较慢，不推荐！</p><h2 id="二、下载对应包手动安装"><a href="#二、下载对应包手动安装" class="headerlink" title="二、下载对应包手动安装"></a>二、下载对应包手动安装</h2><p><a href="https://github.com/coder/code-server/releases">跳转Github</a></p><p>下载后，到对应文件夹</p><p>Debian系deb包运行dpkg -i +包名</p><p>用rpm包管理的rpm包运行rpm -ivh +包名</p><h2 id="三、设置参数"><a href="#三、设置参数" class="headerlink" title="三、设置参数"></a>三、设置参数</h2><p>上面只是安装了code-sever，还没有配置code-server。首先先运行：</p><p>sudo systemctl enable –now code-server@$USER</p><p>再运行：</p><p>vim ~&#x2F;.config&#x2F;code-server&#x2F;config.yaml先设置第一行：0.0.0.0：端口倒数第二行设置自己的密码！保存退出！</p><p>之后运行：</p><p>systemctl restart code-server@$USER就可以用ip+端口访问  若不会vim操作，<a href="https://blog.csdn.net/hsforpyp/article/details/113833465?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167551730216800192236548%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167551730216800192236548&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-113833465-null-null.142%5Ev73%5Ewechat_v2,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=vim&spm=1018.2226.3001.4187">点击这。</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、脚本安装&quot;&gt;&lt;a href=&quot;#一、脚本安装&quot; class=&quot;headerlink&quot; title=&quot;一、脚本安装&quot;&gt;&lt;/a&gt;一、脚本安装&lt;/h2&gt;&lt;p&gt;运行：&lt;/p&gt;
&lt;p&gt;curl -fsSL &lt;a href=&quot;https://code-server.dev</summary>
      
    
    
    
    <category term="Linux" scheme="https://junleea.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>centOS手动安装Java环境</title>
    <link href="https://junleea.github.io/[object%20Object]/2023/02/02/centos%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85java%E7%8E%AF%E5%A2%83/"/>
    <id>https://junleea.github.io/[object%20Object]/2023/02/02/centos%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85java%E7%8E%AF%E5%A2%83/</id>
    <published>2023-02-02T13:29:04.000Z</published>
    <updated>2023-09-14T05:50:16.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、rpm包"><a href="#一、rpm包" class="headerlink" title="一、rpm包"></a>一、rpm包</h2><p>下载rpm包，<a href="https://www.oracle.com/java/technologies/downloads/#license-lightbox">rpm包</a> 运行命令rpm -ivh + 包名</p><h2 id="二、下载压缩包添加环境变量"><a href="#二、下载压缩包添加环境变量" class="headerlink" title="二、下载压缩包添加环境变量"></a>二、下载压缩包添加环境变量</h2><p>vim &#x2F;etc&#x2F;profile 添加变量： #java environment JAVA_HOME&#x3D;解压缩后的文件夹路径 JRE_HOME&#x3D;$JAVA_HOME&#x2F;jre PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib export JAVA_HOME JRE_HOME PATH CLASSPATH 保存 运行：source &#x2F;etc&#x2F;profile</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、rpm包&quot;&gt;&lt;a href=&quot;#一、rpm包&quot; class=&quot;headerlink&quot; title=&quot;一、rpm包&quot;&gt;&lt;/a&gt;一、rpm包&lt;/h2&gt;&lt;p&gt;下载rpm包，&lt;a href=&quot;https://www.oracle.com/java/technologi</summary>
      
    
    
    
    <category term="Linux" scheme="https://junleea.github.io/categories/Linux/"/>
    
    
    <category term="CentOS" scheme="https://junleea.github.io/tags/CentOS/"/>
    
    <category term="Java" scheme="https://junleea.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
